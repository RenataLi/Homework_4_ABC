     1                                  ;------------------------------------------------------------------------------
     2                                  ; perimeter.asm - единица компиляции, вбирающая функции вычисления идеального времени и сортировки контейнера
     3                                  ;------------------------------------------------------------------------------
     4                                  extern printf
     5                                  extern AUTOMOBILE
     6                                  extern BUS
     7                                  extern TRUCK
     8                                  extern OutCar
     9                                  ;----------------------------------------------
    10                                  ; Вычисление расстояния
    11                                  
    12                                  global Distance
    13                                  Distance:
    14                                  section .data
    15 00000000 0000000000005940            number1       dq    100.0
    16                                  
    17                                  section .text
    18 00000000 55                      push rbp
    19 00000001 4889E5                    mov rbp, rsp
    20 00000004 8B07                      mov eax,[rdi]
    21 00000006 F20F2AC0                  cvtsi2sd xmm0,eax
    22 0000000A 8B5704                    mov edx,[rdi+4]
    23 0000000D F20F2ACA                  cvtsi2sd xmm1,edx
    24 00000011 F20F5EC1                  divsd xmm0,xmm1
    25 00000015 C9                      leave
    26 00000016 C3                      ret
    27                                      
    28                                  global DistanceCar
    29                                  DistanceCar:
    30                                  section .text
    31 00000017 55                      push rbp
    32 00000018 4889E5                  mov rbp, rsp
    33                                  
    34                                      ; В rdi адрес фигуры
    35 0000001B 8B07                        mov eax, [rdi]
    36 0000001D 3B0425[00000000]            cmp eax, [AUTOMOBILE]
    37 00000024 741A                        je distanceAutomobile
    38 00000026 3B0425[00000000]            cmp eax, [BUS]
    39 0000002D 741C                        je distanceBus
    40 0000002F 3B0425[00000000]            cmp eax, [TRUCK]
    41 00000036 741E                        je distanceTruck
    42 00000038 31C0                        xor eax, eax
    43 0000003A F20F2AC0                    cvtsi2sd    xmm0, eax
    44 0000003E EB21                        jmp     return
    45                                  distanceAutomobile:
    46                                      ; Вычисление идеального времени поезда
    47 00000040 4883C704                    add     rdi, 4
    48 00000044 E8B7FFFFFF                  call    Distance
    49 00000049 EB16                        jmp     return
    50                                  distanceBus:
    51                                      ; Вычисление идеального времени корабля.
    52 0000004B 4883C704                    add     rdi, 4
    53 0000004F E8ACFFFFFF                  call    Distance
    54 00000054 EB0B                        jmp     return
    55                                  distanceTruck:
    56                                      ; Вычисление идеального времени корабля.
    57 00000056 4883C704                    add     rdi, 4
    58 0000005A E8A1FFFFFF                  call    Distance
    59 0000005F EB00                        jmp     return
    60                                  return:
    61 00000061 C9                      leave
    62 00000062 C3                      ret
    63                                  
    64                                  ;----------------------------------------------
    65                                  ;Сортировка пузырьком
    66                                  ;void Sort(container &c){
    67                                  ;    int size = c.len;
    68                                  ;    car* temp; // временная переменная для обмена элементов местами
    69                                  ;    // Сортировка массива пузырьком
    70                                  ;    for (int i = 0; i < size - 1; i++) {
    71                                  ;        for (int j = 0; j < size - i - 1; j++) {
    72                                  ;            if (Distance(*(c.cont[j]))> Distance(*(c.cont[j + 1]))) {
    73                                  ;                // меняем элементы местами
    74                                  ;                temp = c.cont[j];
    75                                  ;                c.cont[j] = c.cont[j + 1];
    76                                  ;                c.cont[j + 1] = temp;
    77                                  ;            }
    78                                  ;        }
    79                                  ;    }
    80                                  ;}
    81                                  global BubbleSortContainer
    82                                  BubbleSortContainer:
    83                                  section .data
    84 00000008 0000000000000000            .sum    dq  0
    85 00000010 6669727374203D2025-         .outf db "first = %d,second = %d %d",10,0
    85 00000019 642C7365636F6E6420-
    85 00000022 3D2025642025640A00 
    86 0000002B 64203D2025640A00            .outf1 db "d = %d",10,0
    87 00000033 72646931203D202564-         .outf2 db "rdi1 = %d , rdi2 = %d",10,0
    87 0000003C 202C2072646932203D-
    87 00000045 2025640A00         
    88 0000004A 776F726B0A00                .outf3 db "work",10,0
    89 00000050 786D6D30203D20256C-         .outf4 db "xmm0 = %lg %d, xmm1 = %lg",10,0
    89 00000059 672025642C20786D6D-
    89 00000062 31203D20256C670A00 
    90 0000006B 726469203D2025642C-         .outf5 db "rdi = %d, rsi = %d",10,0
    90 00000074 20727369203D202564-
    90 0000007D 0A00               
    91 0000007F 00                          .zero db 0
    92 00000080 18                          .two db 24
    93                                      
    94 00000081 727369203D2025642C-         .outf6 db "rsi = %d, rdi = %d ", 10 , 0
    94 0000008A 20726469203D202564-
    94 00000093 200A00             
    95                                  section .bss
    96 00000000 <res 00000008>              .first resq 1
    97 00000008 <res 00000008>              .last resq 1
    98 00000010 <res 00000008>              .len resq 1
    99 00000018 <res 00000008>              .d resq 1
   100 00000020 <res 00000008>              .i resq 1
   101 00000028 <res 00000008>              .j resq 1
   102 00000030 <res 00000008>              .g resq 1
   103 00000038 <res 00000008>              .start resq 1 ; начало контейнера
   104 00000040 <res 00000008>              .idealtime1 resq 1;
   105 00000048 <res 00000008>              .idealtime2 resq 1;
   106 00000050 <res 00000010>              .adress1 resq 2;
   107 00000060 <res 00000008>              .adress2 resq 1;
   108                                  section .text
   109 00000063 55                      push rbp
   110 00000064 4889E5                  mov rbp, rsp
   111                                  
   112                                      ; В rdi адрес начала контейнера
   113 00000067 48893C25[38000000]          mov [.start], rdi
   114 0000006F 893425[08000000]            mov [.last], esi            ; число фигур
   115 00000076 BE00000000                  mov esi, 0
   116 0000007B 893425[00000000]            mov [.first] , esi
   117                                      
   118                                  ;    mov rdi, .outf
   119                                  ;    mov rsi,[.first]
   120                                  ;    mov rdx, [.last]
   121                                  ;    mov rax, 0
   122                                  ;    call printf
   123 00000082 488B3425[08000000]          mov rsi, [.last] ;d = (last - first) / 2
   124 0000008A 482B3425[00000000]          sub rsi,[.first]
   125 00000092 48D1FE                      sar rsi, 1
   126 00000095 48893425[18000000]          mov [.d], rsi
   127                                      
   128                                  ;    mov rdi, .outf1
   129                                  ;    mov rsi, [.d]
   130                                  ;    mov rax,0
   131                                  ;    call printf
   132                                  .firstloop: ;for (auto d = (last - first) / 2; d != 0; d /= 2)
   133 0000009D 488B3425[18000000]          mov rsi, [.d] ;if(d == 0) break
   134 000000A5 4883FE00                    cmp rsi, 0
   135 000000A9 0F84A5010000                je .return
   136                                      
   137 000000AF 488B3425[00000000]          mov rsi, [.first] ;auto i = first + d
   138 000000B7 48033425[18000000]          add rsi, [.d]
   139 000000BF 48893425[20000000]          mov [.i], rsi
   140                                      
   141                                   ;   mov rdi, .outf1
   142                                  ;    mov rsi, [.i]
   143                                  ;    mov rax,0
   144                                  ;    call printf
   145                                      .secondloop: ;for (auto i = first + d; i != last; ++i)
   146 000000C7 488B3425[20000000]              mov rsi, [.i] ; if(i == last) break;
   147 000000CF 483B3425[08000000]              cmp rsi,[.last]
   148 000000D7 0F845F010000                    je .continueFirstLoop
   149                                          
   150 000000DD 488B3425[20000000]              mov rsi,[.i] ;j = i
   151 000000E5 48893425[28000000]              mov [.j], rsi
   152                                          
   153                                          ;mov rdi, .outf1
   154                                  ;        mov rsi, [.j]
   155                                  ;        mov rax,0
   156                                  ;        call printf
   157                                          .3loop: ;for (auto j = i; j - first >= d && IdealTime(*c.cont[j]) < IdealTime(*c.cont[(j - d)]); j -= d)
   158 000000ED 488B3425[28000000]                  mov rsi,[.j]     ;if(j - first < d) break
   159 000000F5 482B3425[00000000]                  sub rsi,[.first]
   160                                              
   161                                  ;           mov rdi, .outf1
   162                                  ;            mov rax,0
   163                                  ;            call printf
   164                                              
   165 000000FD 483B3425[18000000]                  cmp rsi, [.d]
   166 00000105 0F8C19010000                        jl .continue2loop
   167                                              
   168 0000010B 488B3C25[38000000]                  mov rdi, [.start];*c.cont[j] in rdi
   169 00000113 488B3425[28000000]                  mov rsi, [.j]
   170 0000011B 486BF618                            imul rsi, 24
   171 0000011F 4801F7                              add rdi, rsi
   172 00000122 48893C25[50000000]                  mov [.adress1], rdi
   173                                            ;  mov [.start], rdi
   174                                  ;            mov rdi, .outf3
   175                                  ;            mov rax, 0
   176                                  ;            call printf
   177                                  ;                mov rax , rdi
   178                                  ;                mov rdi, .outf
   179                                  ;                mov rsi,[rax]
   180                                  ;                mov rdx, [rax+4]
   181                                  ;                mov rcx, [rax+8]
   182                                  ;                mov rax, 0
   183                                  ;                call printf
   184                                  ;                mov rdi, rax
   185                                              
   186                                              ;call OutShape             
   187 0000012A E8E8FEFFFF                          call DistanceCar ;результат в xmm0
   188                                              
   189                                            ; mov [.start], rdi
   190                                  ;            mov rdi, .outf3
   191                                  ;            mov rax, 0
   192                                  ;            call printf
   193                                              
   194 0000012F F20F110425-                         movsd [.idealtime1], xmm0 ; IdealTime(*c.cont[j]) .idealtime1
   194 00000134 [40000000]         
   195                                              
   196 00000138 488B3C25[38000000]                  mov rdi, [.start];*c.cont[j-d] in rdi
   197 00000140 488B3425[28000000]                  mov rsi, [.j]
   198 00000148 482B3425[18000000]                  sub rsi, [.d]
   199 00000150 486BF618                            imul rsi, 24
   200 00000154 4801F7                              add rdi, rsi          
   201                                              ;mov r8, [rdi+4]   
   202 00000157 48893C25[60000000]                  mov [.adress2], rdi
   203 0000015F E8B3FEFFFF                          call DistanceCar ;результат в xmm0 IdealTime(*c.cont[(j - d)])
   204                                              
   205                                  
   206                                  ;            mov rdi, .outf4
   207                                  ;            mov rsi, r8
   208                                  ;            mov rax, 1
   209                                  ;            call printf
   210 00000164 F20F10C8                            movsd xmm1, xmm0
   211 00000168 F20F110425-                         movsd [.idealtime2], xmm0
   211 0000016D [48000000]         
   212 00000171 F20F100425-                         movsd xmm0, [.idealtime1]
   212 00000176 [40000000]         
   213                                  ;            
   214                                              ;mov rdi, .outf4
   215                                  ;            mov rsi, r8
   216                                  ;            mov rax, 1
   217                                  ;            call printf
   218                                              
   219                                  ;            mov rdi, .outf3
   220                                  ;            mov rax, 0
   221                                  ;            call printf
   222                                              
   223 0000017A F20F100425-                         movsd xmm0, [.idealtime1]
   223 0000017F [40000000]         
   224 00000183 F20F100C25-                         movsd xmm1, [.idealtime2]
   224 00000188 [48000000]         
   225                                  
   226 0000018C FC                                  cld
   227                                              ;cmpsd
   228                                              ;comiss  xmm0 , xmm1 ;IdealTime(*c.cont[j])? IdealTime(*c.cont[(j - d)])
   229 0000018D 660F2EC1                            UCOMISD xmm0,xmm1
   230 00000191 0F838D000000                        jnb .continue2loop ;if (IdealTime(*c.cont[j]) >= IdealTime(*c.cont[(j - d)])) break;
   231                                  
   232                                              ;comiss  xmm0 , xmm1 ;IdealTime(*c.cont[j])? IdealTime(*c.cont[(j - d)])
   233                                              ;je .continue2loop
   234                                              
   235                                  
   236                                              ;mov rdi, .outf3
   237                                  ;            mov rax, 0
   238                                  ;            call printf
   239                                              ;код обмена
   240                                               
   241                                              ;mov rax, [.adress1]
   242                                  ;            mov rdi, [rax]
   243                                  ;            mov rax, [.adress2]
   244                                  ;            mov rsi, [rax]
   245                                  ;            mov rsi, rdi
   246                                  ;            mov rdx, rsi
   247                                  ;            mov rdi, .outf6
   248                                  ;            mov rax, 0
   249                                  ;            call printf
   250                                              
   251                                  ;            mov rdi, [.adress1]
   252                                  ;            mov rsi, [.adress2]
   253                                              ;XCHG rdi, rsi
   254 00000197 B800000000                          mov rax , 0
   255 0000019C 48890425[30000000]                  mov [.g] , rax
   256                                              .change:
   257 000001A4 488B0425[30000000]                      mov rax, [.g]
   258 000001AC 4883F806                                cmp rax, 6
   259 000001B0 7455                                    je .endchange
   260 000001B2 4C8B0425[30000000]                      mov r8, [.g]
   261 000001BA 4D6BC004                                imul r8, 4
   262                                                  
   263 000001BE 488B0425[50000000]                      mov rax, [.adress1]
   264 000001C6 4C01C0                                  add rax, r8
   265 000001C9 8B08                                    mov ecx, [rax]
   266                                                  
   267 000001CB 488B0425[60000000]                      mov rax, [.adress2]
   268 000001D3 4C01C0                                  add rax, r8
   269 000001D6 8B10                                    mov edx, [rax]
   270                                                  
   271 000001D8 488B0425[50000000]                      mov rax, [.adress1]
   272 000001E0 4C01C0                                  add rax, r8
   273 000001E3 8910                                    mov [rax],edx
   274                                                  
   275 000001E5 488B0425[60000000]                      mov rax, [.adress2]
   276 000001ED 4C01C0                                  add rax, r8
   277 000001F0 8908                                    mov [rax], ecx
   278                                                  
   279 000001F2 488B0425[30000000]                      mov rax, [.g]; g++
   280 000001FA 48FFC0                                  inc rax
   281 000001FD 48890425[30000000]                      mov [.g], rax
   282 00000205 EB9D                                    jmp .change
   283                                              
   284                                              
   285                                              ;код обмена
   286                                              .endchange:
   287 00000207 488B3425[28000000]                  mov rsi, [.j];j -= d
   288 0000020F 482B3425[18000000]                  sub rsi, [.d];
   289 00000217 48893425[28000000]                  mov [.j], rsi
   290 0000021F E9C9FEFFFF                          jmp .3loop
   291                                          .continue2loop:
   292 00000224 488B3425[20000000]              mov rsi, [.i]; ++i
   293 0000022C 48FFC6                          inc rsi
   294 0000022F 48893425[20000000]              mov [.i],rsi
   295 00000237 E98BFEFFFF                      jmp .secondloop
   296                                      .continueFirstLoop:
   297 0000023C 488B3425[18000000]          mov rsi, [.d];d /= 2
   298 00000244 48D1FE                      sar rsi, 1
   299 00000247 48893425[18000000]          mov [.d], rsi
   300 0000024F E949FEFFFF                  jmp .firstloop
   301                                  ; СУММА ПЕРИМЕТРОВ:
   302                                  ;    xor ecx, ecx            ; счетчик фигур
   303                                  ;    movsd xmm1, [.sum]      ; перенос накопителя суммы в регистр 1
   304                                  ;.loop:
   305                                  ;    cmp ecx, ebx            ; проверка на окончание цикла
   306                                  ;    jge .return             ; Перебрали все фигуры
   307                                  ;
   308                                  ;    mov r10, rdi            ; сохранение начала фигуры
   309                                  ;    call IdealTimeTransport     ; Получение периметра первой фигуры
   310                                  ;    addsd xmm1, xmm0        ; накопление суммы
   311                                  ;    inc rcx                 ; индекс следующей фигуры
   312                                  ;    add r10, 24             ; адрес следующей фигуры
   313                                  ;    mov rdi, r10            ; восстановление для передачи параметра
   314                                  ;    jmp .loop
   315                                  .return:
   316 00000254 F20F10C1                    movsd xmm0, xmm1
   317 00000258 C9                      leave
   318 00000259 C3                      ret
